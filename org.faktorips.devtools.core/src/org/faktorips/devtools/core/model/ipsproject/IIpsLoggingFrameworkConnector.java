/*******************************************************************************
 * Copyright (c) Faktor Zehn GmbH. <http://www.faktorzehn.org>
 * 
 * This source code is available under the terms of the AGPL Affero General Public License version
 * 3.
 * 
 * Please see LICENSE.txt for full license terms, including the additional permissions and
 * restrictions as well as the possibility of alternative license terms.
 *******************************************************************************/

package org.faktorips.devtools.core.model.ipsproject;

import java.util.List;

/**
 * This is the interface for the extension-point
 * <code>org.faktorips.devtools.core.loggingFrameworkConnector</code> IIpsArtefactBuilder can access
 * registered logging framework connectors to generate logging code independent from a specific
 * logging framework. For an IpsProject a specific connector can be selected by means of the
 * attribute <code>loggingFrameworkConnectorId</code> within the <code>IpsArtefactBuilderSet</code>
 * tag. The id that is to specify has to be one of the ids of the registered extension of the
 * loggingFrameworkConnector extension-point. Some of the parameters of the methods of this
 * interface have the ending <i>Exp</i> meaning expression. For those parameters a string
 * representing an expression not a constant is expected. Especially an expression for a constant in
 * java is a string including the quotation marks.
 * 
 * @author Peter Erzberger
 */
public interface IIpsLoggingFrameworkConnector {

    /**
     * Constant for the logging level.
     */
    public final static int LEVEL_DEBUG = 0;

    /**
     * Constant for the logging level.
     */
    public final static int LEVEL_INFO = 10;

    /**
     * Constant for the logging level.
     */
    public final static int LEVEL_WARNING = 20;

    /**
     * Constant for the logging level.
     */
    public final static int LEVEL_ERROR = 30;

    /**
     * Constant for the logging level.
     */
    public final static int LEVEL_TRACE = 40;

    /**
     * Returns the identifier of this builder. This is the id of the extension.
     */
    public String getId();

    /**
     * Sets the identifier of this builder. This is the id of the extension. This method is called
     * by the framework and should not be called by users of this connector.
     */
    public void setId(String id);

    /**
     * Returns the class name of the logger of this connector.
     */
    public String getLoggerClassName();

    /**
     * Returns the code fragment for the statement that represents the instance of a logger.
     * 
     * @param scopeExp the scope the logger. Typically the logger name in logging frameworks.
     * @param usedClasses this parameter must not be <code>null</code>. Implementations of this
     *            method add the qualified names of the classes that are used by code generated by
     *            this method.
     * @return the code fragment representing the logger instance
     */
    public String getLoggerInstanceStmt(String scopeExp, List<String> usedClasses);

    /**
     * Returns the statement for logging an exception.
     * 
     * @param level the logging level. The value has to be one of the level constants defined in
     *            this interface
     * @param msgExp an additional message that is added to the logging statement
     * @param throwableExp the throwable that is to log
     * @param loggerInstanceExp the logger instance expression. The result of the call to one of the
     *            getLoggerInstanceStmt() methods
     * @param usedClasses this parameter must not be <code>null</code>. Implementations of this
     *            method add the qualified names of the classes that are used by code generated by
     *            this method.
     */
    public String getLogStmtForThrowable(int level,
            String msgExp,
            String throwableExp,
            String loggerInstanceExp,
            List<String> usedClasses);

    /**
     * Returns the statement for logging a message. The message is expected to be an expression that
     * provides the message text, e.g. a method like getMessage().
     * 
     * @param level the logging level. The value has to be one of the level constants defined in
     *            this interface
     * @param msgExp the message that is to log
     * @param loggerInstanceExp the logger instance expression. The result of the call to one of the
     *            getLoggerInstanceStmt() methods
     * @param usedClasses this parameter must not be <code>null</code>. Implementations of this
     *            method add the qualified names of the classes that are used by code generated by
     *            this method.
     */
    public String getLogStmtForMessageExp(int level, String msgExp, String loggerInstanceExp, List<String> usedClasses);

    /**
     * Returns the statement for logging a message. The message is expected to be a string constant.
     * 
     * @param level the logging level. The value has to be one of the level constants defined in
     *            this interface
     * @param msgConstant the message that is to log
     * @param loggerInstanceExp the logger instance expression. The result of the call to one of the
     *            getLoggerInstanceStmt() methods
     * @param usedClasses this parameter must not be <code>null</code>. Implementations of this
     *            method add the qualified names of the classes that are used by code generated by
     *            this method.
     */
    public String getLogStmtForMessage(int level, String msgConstant, String loggerInstanceExp, List<String> usedClasses);

    /**
     * Returns the primitive boolean expression that indicates if the logging of the provided
     * logging level is to execute, typically something like <code>Logger.isDebugEnabled()</code>.
     * 
     * @param level the logging level that is to check by the generated expression
     * @param loggerInstanceExp the logger instance expression. The result of the call to one of the
     *            getLoggerInstanceStmt() methods
     * @param usedClasses this parameter must not be <code>null</code>. Implementations of this
     *            method add the qualified names of the classes that are used by code generated by
     *            this method.
     * 
     * @throws IllegalArgumentException if the provided logging level is not defined
     */
    public String getLogConditionExp(int level, String loggerInstanceExp, List<String> usedClasses);

}
