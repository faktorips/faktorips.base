/*******************************************************************************
 * Copyright (c) Faktor Zehn GmbH - faktorzehn.org
 * 
 * This source code is available under the terms of the AGPL Affero General Public License version
 * 3.
 * 
 * Please see LICENSE.txt for full license terms, including the additional permissions and
 * restrictions as well as the possibility of alternative license terms.
 *******************************************************************************/

package org.faktorips.devtools.core.ui.views.testrunner;

import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.dialogs.ErrorDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorDescriptor;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.ui.part.FileEditorInput;
import org.faktorips.devtools.core.IpsPlugin;
import org.faktorips.devtools.core.ui.IpsUIPlugin;
import org.faktorips.devtools.core.ui.editors.testcase.TestCaseSection;
import org.faktorips.devtools.model.exception.CoreRuntimeException;
import org.faktorips.devtools.model.ipsobject.IIpsObject;
import org.faktorips.devtools.model.ipsobject.IpsObjectType;
import org.faktorips.devtools.model.ipsproject.IIpsPackageFragmentRoot;
import org.faktorips.devtools.model.ipsproject.IIpsProject;
import org.faktorips.devtools.model.plugin.IpsStatus;
import org.faktorips.devtools.model.testcase.IIpsTestRunListener;

/**
 * Action for opening a test case in the default editor.
 * 
 * @author Joerg Ortmann
 */
public class OpenTestInEditorAction extends Action {

    private String fFileName;
    private String testQualifiedName;
    private IpsTestRunnerViewPart fTestRunnerViewPart;
    private String failureTraceLine;

    public OpenTestInEditorAction(IpsTestRunnerViewPart fTestRunnerViewPart, String fileName, String qualifiedTestName,
            String failureTraceLine) {

        super(Messages.OpenTestInEditorAction_Title);
        this.failureTraceLine = failureTraceLine;
        fFileName = fileName;
        testQualifiedName = qualifiedTestName;
        this.fTestRunnerViewPart = fTestRunnerViewPart;
    }

    @Override
    public void run() {
        try {
            Object element = findElement(getLaunchedProject(), fFileName);
            if (element == null) {
                MessageDialog.openError(getShell(), Messages.OpenTestInEditorAction_ErrorDialogTestCaseNotFound_Title,
                        Messages.OpenTestInEditorAction_ErrorDialogTestCaseNotFound_Description);
                return;
            }
            if (element instanceof IFile) {
                IFileEditorInput editorInput = new FileEditorInput((IFile)element);
                IEditorDescriptor editor = IpsPlugin.getDefault().getWorkbench().getEditorRegistry()
                        .getDefaultEditor(((IFile)element).getName());
                IpsPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage()
                        .openEditor(editorInput, editor.getId());
            } else if (element instanceof IIpsObject) {
                IpsUIPlugin.getDefault().openEditor((IIpsObject)element);
            } else {
                MessageDialog.openError(getShell(), Messages.OpenTestInEditorAction_ErrorDialogTestCaseNotFound_Title,
                        Messages.OpenTestInEditorAction_ErrorDialogTestCaseNotFound_Description);
                return;
            }
            selectFailureInTestCaseEditor();
        } catch (CoreException e) {
            fTestRunnerViewPart.setInfoMessage(Messages.OpenTestInEditorAction_ErrorCannotOpenEditor_Message);
            ErrorDialog.openError(getShell(), Messages.OpenTestInEditorAction_ErrorDialogCannotOpenEditor_Title,
                    Messages.OpenTestInEditorAction_ErrorDialogCannotOpenEditor_Description, e.getStatus());
            return;
        } catch (Exception e) {
            IpsPlugin.logAndShowErrorDialog(new IpsStatus(e));
        }
    }

    private void selectFailureInTestCaseEditor() {
        List<String[]> failureDetails = fTestRunnerViewPart.getTestRunPane().getAllFailureDetailsOfSelectedTestCase();
        // post the failure trace line to the editors (the listeners)
        List<IIpsTestRunListener> listeners = IpsPlugin.getDefault().getIpsTestRunner().getIpsTestRunListener();
        for (IIpsTestRunListener listener : listeners) {
            // navigation to the failure
            if (listener instanceof TestCaseSection) {
                ((TestCaseSection)listener).testStarted(testQualifiedName, false);
                if (failureDetails.size() > 0) {
                    // first notify all listener about all failures of the selected test
                    for (String[] failure : failureDetails) {
                        if (!testQualifiedName.equals(failure[0])) {
                            listener.testErrorOccured(testQualifiedName, failure);
                        } else {
                            listener.testFailureOccured(testQualifiedName, failure);
                        }
                    }
                }
                listener.testFinished(testQualifiedName);
                // set the focus to the failure which was clicked in the failure trace
                if (failureTraceLine != null) {
                    String[] failure = fTestRunnerViewPart.getFailureDetailsOfSelectedTestCase();
                    ((TestCaseSection)listener).setFocusOnFailureField(testQualifiedName, failure);
                }
            }
        }
    }

    private Object findElement(IJavaProject javaProject, String fileName) {
        if (javaProject == null) {
            return null;
        }
        Object element = null;
        try {
            element = javaProject.getProject().getFile(fileName);
        } catch (RuntimeException e) {
            // ignore exception while searching the element
        }
        if (element == null) {
            return null;
        }

        if (element instanceof IFile && !((IFile)element).exists()) {
            // file not found
            // try to search by using the qualified name of the test case
            // e.g. if the ips object is inside an ips archive
            IIpsProject ipsProject = IpsPlugin.getDefault().getIpsTestRunner().getIpsProject();
            try {
                IIpsPackageFragmentRoot[] ipsPackageFragmentRoots = ipsProject.getIpsPackageFragmentRoots();
                for (IIpsPackageFragmentRoot ipsPackageFragmentRoot : ipsPackageFragmentRoots) {
                    // currently two types of ips objects supports test:
                    // 1. product cmpts
                    // 2. isp test cases
                    element = ipsPackageFragmentRoot.findIpsObject(IpsObjectType.TEST_CASE, testQualifiedName);
                    if (element != null) {
                        break;
                    }
                    element = ipsPackageFragmentRoot.findIpsObject(IpsObjectType.PRODUCT_CMPT, testQualifiedName);
                    if (element != null) {
                        break;
                    }
                }
            } catch (CoreRuntimeException e) {
                IpsPlugin.logAndShowErrorDialog(e);
            }
        }

        return element;
    }

    private IJavaProject getLaunchedProject() {
        return fTestRunnerViewPart.getLaunchedProject();
    }

    private Shell getShell() {
        return fTestRunnerViewPart.getSite().getShell();
    }
}
