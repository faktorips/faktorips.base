
/*
 * JavaCC grammar for the formula language.
 */

options {
		BUILD_NODE_FILES=true;
		MULTI = true; // generate a class for each node
		IGNORE_CASE = true; 
		STATIC = false;
		VISITOR = true;
		JAVA_UNICODE_ESCAPE = true;
		UNICODE_INPUT = true;
		NODE_USES_PARSER = true;
}


PARSER_BEGIN(FlParser)

package org.faktorips.fl.parser;

public class FlParser {
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    FlParser p = new FlParser(System.in);
    try {
      SimpleNode n = p.start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(FlParser)


SKIP : /* allow whitespace and comments between tokens */
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

/*************************************************
 * Tokens for datatypes supported by the grammar *
 *************************************************/
TOKEN:
{
    <BOOLEAN_LITERAL: "true" | "TRUE" | "false" | "FALSE">
    |  
    <INTEGER_LITERAL: ["0"-"9"] (["0"-"9"])*>
    |
    <DECIMAL_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
        |"." (["0"-"9"])+ (<EXPONENT>)?
        |(["0"-"9"])+ <EXPONENT>
        |(["0"-"9"])+ (<EXPONENT>)?
    >
    |
    <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
    |
    <STRING_LITERAL:
        "\""
        ( (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        )*
        "\""> 
    |
    <MONEY_LITERAL: (<INTEGER_LITERAL> | <DECIMAL_LITERAL>) <LETTER> (<LETTER>)? (<LETTER>)?> 
    |
    <#LETTER: ["a"-"z","A"-"Z","\u00e4","\u00c4","\u00f6","\u00d6","\u00cf","\u00dc"] >
    |
    <NULL_LITERAL: "null" | "NULL" >

}

/**********************************************************************
 * Token for identifiers.                                             *
 * A letter or underscore followed by letters, underscores and digits *
 **********************************************************************/
TOKEN:    
{
    < IDENTIFIER:  <LETTER_OR_UNDERSCORE>(<IDENTIFIER_PART>)? (
    	"."<IDENTIFIER_PART>
    	)*("@default")?>
    |
    < IDENTIFIER_PART: (
    	<LETTER_OR_UNDERSCORE>
    	|<DIGIT>
    	|<DATE_IDENTIFIER>)+
    	("["(<DIGIT>)+"]"
    	|"["(<STRING_LITERAL>)"]"
    	|"["(<STRING_LITERAL>)"]["(<DIGIT>)+"]")?>
    |
    < #LETTER_OR_UNDERSCORE: ["_","a"-"z","A"-"Z","\u00e4","\u00c4","\u00f6","\u00d6","\u00cf","\u00dc"] >
    |
    < #DIGIT: ["0"-"9"] >
    |
    < DATE_IDENTIFIER: ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] "-" ["0"-"1"]["0"-"9"] ("-" ["0"-"3"]["0"-"9"])? > 
}


/***************
 * Productions *
 ***************/

SimpleNode start() #Start:
{}
{
    expr() (<EOF>)
    { return jjtThis; }
}


void expr() #void:
{}
{
    equalsExpr()
}

void equalsExpr() #void:
{}
{
    compareExpr() ("=" compareExpr() #EQNode(2) | "!=" compareExpr() #NotEQNode(2))*
}


void compareExpr() #void:
{}
{
    addExpr()
    (
        "<"    addExpr() #LTNode(2)
        | ">"  addExpr() #GTNode(2)
        | "<=" addExpr() #LENode(2)
        | ">=" addExpr() #GENode(2)
    )*
}


void addExpr() #void:
{}
{
   multExpr() ("+" multExpr() #AddNode(2) | "-" multExpr() #SubNode(2))*
}


void multExpr() #void:
{}
{
    unaryExpr() ("*" unaryExpr() #MultNode(2) | "/" unaryExpr() #DivNode(2))*
}


void unaryExpr() #void:
{}
{
    ( "+" unaryExpr() #PlusNode(1) | "-" unaryExpr() #MinusNode(1) | "!" unaryExpr() #NotNode(1))
    | primitiveExpr()
}


void primitiveExpr() #void:
{}
{
    "(" expr() ")" #ParenthesisNode(1) | LOOKAHEAD(2) functionCallExpr() | literal() 
}


void functionCallExpr() #FunctionCallNode:
{}
{
	<IDENTIFIER> "(" [argumentList()] ")"
}


void argumentList() #ArgListNode:
{}
{
	expr() ( ";" expr() )*
}


void literal() #void:
{}
{
	<IDENTIFIER> #IdentifierNode
	|
    <BOOLEAN_LITERAL> #BooleanNode
    |
    <INTEGER_LITERAL> #IntegerNode
    |
    <DECIMAL_LITERAL> #DecimalNode
    |
    <STRING_LITERAL> #StringNode
    |
    <MONEY_LITERAL> #MoneyNode
    |
    <NULL_LITERAL> #NullNode
}

