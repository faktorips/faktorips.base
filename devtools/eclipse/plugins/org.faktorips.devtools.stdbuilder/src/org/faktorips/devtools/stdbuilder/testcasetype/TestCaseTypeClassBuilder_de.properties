# 
# Locale dependent generated Java sourcecode documentation in German.
#

# JavaDoc
CLASS_DESCRIPTION_JAVADOC=Instanzen dieser Klasse sind fachliche Testfaelle. Das Testen der fachlichen Logik findet in der Methode executeAsserts() statt. Die Daten fuer die Testfaelle werden von FaktorIPS-Testfaellen geliefert, die auf dem Testfalltyp basieren, auf dessen Basis auch diese Klasse generiert wird.  
CLASS_DESCRIPTION_ANNOTATION=generated

CONSTRUCTOR_JAVADOC=Erzeugt eine neue Instanz des Testfalls.
INITINPUTFROMXML_JAVADOC=Initialisiert die Eingabewerte aus dem XML.
INITEXPECTEDRESULTFROMXML_JAVADOC=Initialisiert die erwarteten Werte aus dem XML.
EXECUTEBUSINESSLOGIC_JAVADOC=Fuehrt die zu testende Geschaeftslogik aus.
EXECUTEASSERTS_JAVADOC=Fuehrt die Pruefungen (Asserts) aus, d.h. vergleicht die erwarteten Werten mit den tatsaechlichen Ergebnissen.
EXECUTEBUSINESSLOGIC_TODO_0=: Hier die durchzufuehrende Geschaeftslogik einfuegen\n// Wenn Sie zum Beispiel einen Testparameter vertrag definiert haben und die Klasse Vertrag eine Methode berechneBeitrag hat,\n// koennen Sie diese hier mit inputVertrag.berechneBeitrag() aufrufen.
ASSERT_TODO_0=: Hier muessen die durchzufuehrenden Pruefungen implementiert werden.
ASSERT_TODO_1=Dies geschieht analog zu JUnit mit Aufrufen von assert(..) Methoden.
ASSERT_TODO_2=Zum Beispiel assertEquals(erwartetVertrag.getBeitrag(), inputVertrag.getBeitrag(), result);
ASSERT_TODO_3=\nUm das getestete Objekt bzw. das Attribut genauer zu beschreiben, kann zusaetzlich der Name des getesteten Objektes und der Attributname uebergeben werden,
ASSERT_TODO_4=bei der Ausfuehrung als Faktor-Ips Testfall, wird dann im Fehlerfall das entsprechende Attribut-Feld im Testfalleditor als rot gekennzeichnet.
ASSERT_TODO_5=Der Name des Objektes bzw. der Name des Attributes, muss gleich dem im Testfalltyp definierten Namen sein.
ASSERT_TODO_6=Es muss immer der komplette Pfad zu dem Testobjekt angegeben werden, wobei die einzelnen Testobjekte auf den unterschiedlichen Ebenen (Root/Parent/Child) durch "." getrennt werden muessen.
ASSERT_TODO_7=Wenn im Testfall mehrere Instanzen des gleiche Testobjektes vorhanden sind, muss ein Index an den Namen (getrennt durch "#") angefuegt werden.
ASSERT_TODO_8=Beispiel: assertEquals(erwartetVertrag.getBeitrag(), inputVertrag.getBeitrag(), result, "Police#0.Vertrag#0", "beitrag");
RUNTIME_EXCEPTION_NO_ASSERTS=Keine Pruefungen vorhanden. Diese muessen in der Java-Klasse, die den Testfalltyp repraesentiert, implementiert werden.
INPUT_PREFIX=input
EXPECTED_RESULT_PREFIX=erwartet
RULE_VIOLATED_PREFIX=Verletzte
RULE_NOT_VIOLATED_PREFIX=NichtVerletzte
VIOLATED_CONSTANT_NAME=VERLETZT
NOT_VIOLATED_CONSTANT_NAME=NICHT_VERLETZT
ASSERT_RULE_METHOD_JAVADOC=Fuehrt die Asserts der Rule aus.
ASSERT_FAIL_VIOLATION_EXPECTED=Fehlende Regelverletzung: 
ASSERT_FAIL_NO_VIOLATION_EXPECTED=Regelverletzung nicht erwartet: 

XML_CALLBACK_CLASS_JAVADOC=XMLCallback Klasse fuer den Testparameter {0}.
XML_CALLBACK_BOOLEAN_FIELD_JAVADOC=Gibt an ob die Klasse fuer die Input (<code>true</code>)\noder fuer die erwarteten Werte (<code>false</code>) verwendet wird.
XML_CALLBACK_CONSTRUCTOR_JAVADOC=Erzeugt eine neue XMLCallback Klasse fuer den Testparameter {0}.
