## ProductBuilder ##

CLASS_JAVADOC=Implementation of {0}. A {0} provides all functionalities that are needed to edit a {1}. Note that this is only for testing purpose. All instances of product have to be created in a new '{@link InMemoryRuntimeRepository}' as Product Component in the runtime repository can not be edited.

# {0} The unqualified Product component class name.
CONSTRUCTOR_INTERNAL_JAVADOC=Generates a new instance of {0} with a given product. The product must exist in the given '{@link InMemoryRuntimeRepository}' that is not allowed to be null.

EXCEPTION_CONSTR_NULL=Product and repository can not be null!

METHOD_ANP_SETTER_JAVADOC=Creates a new generation of of {0} to the given date and sets it to the stored generation to edit. If a generation already exists with the given validFrom date, updates the saved generation with the generation with the given validFrom date.
METHOD_LATEST_GEN_JAVADOC=Replaces the saved generation with the latest generation of the product.

METHOD_GET_RUNTIMEREPOSITORY_JAVADOC=@return '{@link InMemoryRuntimeRepository}' that is saved.

METHOD_GET_VALUE_JAVADOC=@return instance of {0} that is built.
METHOD_GET_GENERATION_JAVADOC=@return generation that is saved.
METHOD_GET_LATEST_GEN_JAVADOC=@return latest generation of the product that is built.

METHOD_GET_CLASS_JAVADOC=Interne Methode

METHOD_FROM_REPO_JAVADOC=Creates a new {0} with a given {1} and a runtime repository.
METHOD_FROM_REPO_CHANGING_JAVADOC=Creates a new {0} with a given {1} that is in the given runtime repository as well as a generation to edit.
METHOD_FROM_REPO_CHANGING_LATEST_JAVADOC=Creates a new {0} with a given {1} that is in the given runtime repository. The latest generation is stored to be edited.

CLASS_FACTORY_JAVADOC=A factory class containing static methods to create new {0}s.

## AssociationBuilder ##
METHOD_ASS_STD_JAVADOC=Sets a existing instance of {0} as the target of the association {1}.
METHOD_ASS_TYPE_PROD_JAVADOC=Gets a instance of a subclass of {0} with the ID of the product component and sets it as {1}.
METHOD_ASS_TYPE_IDS_JAVADOC=Creates a new instance of a subclass of {0} with the IDs and sets it as {1}.
METHOD_ASS_PROD_JAVADOC=Gets a instance of {0} with the ID of the product component and sets it as {1}.
METHOD_ASS_IDS_JAVADOC=Generates a new Instance of {0} with the IDs and sets it as {1}.

## CreateBuilder ##
METHOD_WITH_IDS_DEFAULT_JAVADOC=Generates a new instance of {0} with a given '{@link InMemoryRuntimeRepository}', ID, kindID and versionID. The new product is set to be valid from 1900/1/1.
METHOD_WITH_IDS_DEFAULT_GEN_JAVADOC=A new generation is also generated.
METHOD_WITH_IDS_JAVADOC=Generates a new instance of {0} with a given '{@link InMemoryRuntimeRepository}', ID, kindID and versionID.
METHOD_WITH_PRODID_JAVADOC=Generates a new instance of {0} with the ID of an existing product component.

METHOD_BUILDER_JAVADOC=Creates a new instance of {0} to edit this product.

EXCEPTION_NO_PRODCMPT_FOUND=No product component found with given ID!

CLASS_BUILDER_JAVADOC=This class wraps setter methods for associations. Methods in this class returns a builder for the target class.
CLASS_BUILDER_MULTI_JAVADOC=This class wraps setter methods for associations. Methods in this class return the original {0}.

METHOD_ASSOCIATION_JAVADOC=Returns an '{@link AssociationBuilder}' to build a target object and add directly to a specified association. \
 With the '{@link AssociationBuilder}' you get the builder of the target object for further processing. Use the method '{@link #add()}' \
 if you want to create multiple target objects and always return to this builder instead of the target builder.\n*\n* @see #add()

METHOD_ADD_ASSOCIATION_JAVADOC=Returns an '{@link AddAssociationBuilder}' to build a target object and add directly to a specified association. \
 With the '{@link AddAssociationBuilder}' you always could return to this builder for further processing. Use the method '{@link #associate()}' \
 if you want to have the builder of the target object.\n*\n* @see #associate()


