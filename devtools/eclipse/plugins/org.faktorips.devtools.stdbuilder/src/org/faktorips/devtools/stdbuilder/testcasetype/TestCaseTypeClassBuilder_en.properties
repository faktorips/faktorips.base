# 
# Locale dependent generated Java sourcecode documentation in English.
#

# JavaDoc
CLASS_DESCRIPTION_JAVADOC=Instances of this class are business test cases. Testing of business logic is done by means of the method executeAsserts(). The data for the test cases are provided by the FaktorIPS-Testcases which are associated with the test case type upon which this class is generated.  
CLASS_DESCRIPTION_ANNOTATION=generated


CONSTRUCTOR_JAVADOC=Creates a new test case.
INITINPUTFROMXML_JAVADOC=Initializes the test case's input with the data from the xml.
INITEXPECTEDRESULTFROMXML_JAVADOC=Initializes the test case's expected result with the data from the xml.
EXECUTEBUSINESSLOGIC_JAVADOC=Executes the business logic under test.
EXECUTEASSERTS_JAVADOC=Executes the asserts that compare actual with expected result.
EXECUTEBUSINESSLOGIC_TODO_0=: Insert calls to the business logic under test.\n// e.g. if you have modeled a test parameter Policy which class has a method calculatePremium()\n// you could call it with inputPolicy.calculatePremium().
ASSERT_TODO_0=: Inserts the asserts to execute.
ASSERT_TODO_1=Asserts are programmed as in JUnit via calling assert(..) methods.
ASSERT_TODO_2=E.g. assert(expectedPolicy.getPremium(), inputPolicy.getPremium(), result);
ASSERT_TODO_3=\nTo identify the test object, the name of the test object and the name of the attribute could be specified,
ASSERT_TODO_4=thus if the test case is running as Faktor-Ips test case then failures are marked in the test case editor on the corresponding edit field.
ASSERT_TODO_5=The name of the test object and the name of the test attribute must be the same as specified in the test case type. 
ASSERT_TODO_6=If the test object is a child object then the complete path to the object must be given, the path elements must be separated by ".".
ASSERT_TODO_7=If the test contains several instances with the same name then an index (starting with 0) must be added to the testObject string separated by "#".
ASSERT_TODO_8=E.g. assertEquals(expectedPolicy.getPremium(), inputPolicy.getPremium(), result, "RootObject#0.Policy#0", "premium");
RUNTIME_EXCEPTION_NO_ASSERTS=No asserts implemented in the Java class that represents the test case type.
INPUT_PREFIX=input
EXPECTED_RESULT_PREFIX=expected
RULE_VIOLATED_PREFIX=Violated
RULE_NOT_VIOLATED_PREFIX=NotViolated
VIOLATED_CONSTANT_NAME=VIOLATED
NOT_VIOLATED_CONSTANT_NAME=NOT_VIOLATED
ASSERT_RULE_METHOD_JAVADOC=Executes the asserts for the rule.
ASSERT_FAIL_VIOLATION_EXPECTED=Missing rule violation: 
ASSERT_FAIL_NO_VIOLATION_EXPECTED=Rule violation not expected: 

XML_CALLBACK_CLASS_JAVADOC=XMLCallback class for the test parameter {0}.
XML_CALLBACK_BOOLEAN_FIELD_JAVADOC=Indicates if the class is used for the input (<code>true</code>)\nor for the expected result test content (<code>false</code>)
XML_CALLBACK_CONSTRUCTOR_JAVADOC=Creates a new XMLCallback class for the test parameter {0}.
