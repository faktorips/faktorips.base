## ProductBuilder ##

CLASS_JAVADOC=Implementierung von {0}. Ein {0} stellt alle Funktionen bereit, die für das Bearbeiten einer Instanz der Klasse {1} notwendig sind. Beachte, dass diese Klasse für Tests gedacht ist. Alle Produktbausteintypen müssen hierfür in einem '{@link IModifiableRuntimeRepository}' liegen, da die Instanzen in Runtime Repository nicht verändert werden können.

# {0} The unqualified Product component class name.
CONSTRUCTOR_INTERNAL_JAVADOC=Erzeugt eine neue Instanz von {0} mit einem Produkt. Das Produkt muss im angegebenen '{@link IModifiableRuntimeRepository}' liegen, das selbst nicht null sein darf.

EXCEPTION_CONSTR_NULL=Das Produkt und Repository dürfen nicht null sein!

METHOD_ANP_SETTER_JAVADOC=Erstellt eine neue Anpassungsstufe vom Produkt {0}, die ab dem gegebenen Datum gueltig ist. Falls es bereits eine Anpassungsstufe zu diesem Datum existiert, ersetzt die gespeicherte Anpassungstufe mit der Anpassungsstufe zum Bearbeiten, die dem angegebenen GueltigAb-Datum hat. 
METHOD_LATEST_GEN_JAVADOC=Ersetzt die gespeicherte Anpassungstufe mit der neuesten Anpassungstufe zum Produkt.

METHOD_GET_RUNTIMEREPOSITORY_JAVADOC=@return '{@link IModifiableRuntimeRepository}', welches gespeichert wurde.

METHOD_GET_VALUE_JAVADOC=@return Instanz von {0}, die gebaut wurde
METHOD_GET_GENERATION_JAVADOC=@return gespeicherte {0}
METHOD_GET_LATEST_GEN_JAVADOC=@return die neuste {0} des gebauten Produkts

METHOD_GET_CLASS_JAVADOC=Interne Methode

METHOD_FROM_REPO_JAVADOC=Erzeugt ein neues {0} mit {1} und einem Runtime Repository.
METHOD_FROM_REPO_CHANGING_JAVADOC=Erzeugt ein neues {0} mit {1} das im gegeben Runtime Repository liegt, sowie einer Anpassungsstufe, die bearbeitet werden soll.
METHOD_FROM_REPO_CHANGING_LATEST_JAVADOC=Erzeugt ein neues {0} mit {1} das im gegeben Runtime Repository liegt, sowie der neusten Anpassungsstufe.

CLASS_FACTORY_JAVADOC=Eine statische Klasse, die eine statische Methode bereitstellt um {0} zu erzeugen.

## AssociationBuilder ##
METHOD_ASS_STD_JAVADOC=Setzt eine existierende Instanz von {0} als {1}.
METHOD_ASS_TYPE_PROD_JAVADOC=Holt eine Instanz von einer Subklasse von {0} mit ProductCmptID und setzt diese als {1}.
METHOD_ASS_TYPE_IDS_JAVADOC=Erstellt eine neue Instanz von einer Subklasse von {0} und setzt diese als {1}.
METHOD_ASS_PROD_JAVADOC=Erstellt eine neue Instanz von {0} mit einem Produktbaustein und setzt diese als {1}.
METHOD_ASS_IDS_JAVADOC=Erstellt eine neue Instanz von {0} und setzt diese als {1}.

## CreateBuilder ##
METHOD_WITH_IDS_DEFAULT_JAVADOC=Erzeugt eine neue Instanz von {0} mit einem '{@link IModifiableRuntimeRepository}', ID, kindID und versionID. Das Wirksamkeitsdatum der neuen Instanz wird auf 1900/1/1 gesetzt.
METHOD_WITH_IDS_DEFAULT_GEN_JAVADOC=Eine neue Anpassungsstufe wird ebenfalls erzeugt zu dem Datum.
METHOD_WITH_IDS_JAVADOC=Erzeugt eine neue Instanz von {0} mit einem '{@link IModifiableRuntimeRepository}', ID, kindID und versionID.
METHOD_WITH_PRODID_JAVADOC=Erzeugt eine neue Instanz von {0} mit dem ID von einem existierenden Produktbaustein.

METHOD_BUILDER_JAVADOC=Erzeugt ein neues {0} um dieses Produkt zu bearbeiten.

EXCEPTION_NO_PRODCMPT_FOUND=Keinen Produktbaustein mit der gegebenden ID gefunden!

CLASS_BUILDER_JAVADOC=Dies ist eine Wrapper-Klasse für die Setter für Assoziationen. Die Methoden in dieser Klasse geben einen Builder für die Zielklasse zurück.
CLASS_BUILDER_MULTI_JAVADOC=Dies ist eine Wrapper-Klasse für die Setter für Assoziationen. Die Methoden in dieser Klasse geben wieder den ursprünglichen {0} zurück. 

METHOD_ASSOCIATION_JAVADOC=Erzeugt einen '{@link AssociationBuilder}' mit dem ein Zielobjekt erstellt und direkt an eine \
     Beziehung gehängt werden kann. Der '{@link AssociationBuilder}' gibt daraufhin immer den \
     Builder des Zielobjekts zurück. Um eine Beziehungen aufzubauen und immer zu diesem \
     aktuellen Builder zurück zu kehren, kann die Methode '{@link #add()}' verwendet \
     werden.\n*\n* @see #add()

METHOD_ADD_ASSOCIATION_JAVADOC=Erzeugt einen '{@link AddAssociationBuilder}' mit dem ein Zielobjekt erstellt und direkt an eine \
     Beziehung gehängt werden kann. Der '{@link AddAssociationBuilder}' gibt daraufhin immer wieder \
     diesen Builder zurück um z.B. weitere Beziehungen aufbauen zu können. Um stattdessen den Builder des \
     Zielobjekts zu erhalten kann die Methode '{@link #associate()}' verwendet werden.\n*\n* @see #associate()

