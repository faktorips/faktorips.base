/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /home/dirmeier/git/faktorips.base/org.faktorips.fl/src/org/faktorips/fl/parser/fl.jj */
/*@egen*/
/*
 * JavaCC grammar for the formula language.
 */

options {                                          // generate a class for each node
		IGNORE_CASE = true; 
		STATIC = false;                  
		JAVA_UNICODE_ESCAPE = true;
		UNICODE_INPUT = true;                           
}


PARSER_BEGIN(FlParser)

package org.faktorips.fl.parser;

public class FlParser/*@bgen(jjtree)*/implements FlParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTFlParserState jjtree = new JJTFlParserState();

/*@egen*/
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    FlParser p = new FlParser(System.in);
    try {
      SimpleNode n = p.start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(FlParser)


SKIP : /* allow whitespace and comments between tokens */
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

/*************************************************
 * Tokens for datatypes supported by the grammar *
 *************************************************/
TOKEN:
{
    <BOOLEAN_LITERAL: "true" | "TRUE" | "false" | "FALSE">
    |  
    <INTEGER_LITERAL: ["0"-"9"] (["0"-"9"])*>
    |
    <DECIMAL_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
        |"." (["0"-"9"])+ (<EXPONENT>)?
        |(["0"-"9"])+ <EXPONENT>
        |(["0"-"9"])+ (<EXPONENT>)?
    >
    |
    <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
    |
    <STRING_LITERAL:
        "\""
        ( (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        )*
        "\""> 
    |
    <MONEY_LITERAL: (<INTEGER_LITERAL> | <DECIMAL_LITERAL>) <LETTER> (<LETTER>)? (<LETTER>)?> 
    |
    <#LETTER: ["a"-"z","A"-"Z","\u00e4","\u00c4","\u00f6","\u00d6","\u00cf","\u00dc"] >
    |
    <NULL_LITERAL: "null" | "NULL" >

}

/**********************************************************************
 * Token for identifiers.                                             *
 * A letter or underscore followed by letters, underscores and digits *
 **********************************************************************/
TOKEN:    
{
    < IDENTIFIER:  <LETTER_OR_UNDERSCORE>(<IDENTIFIER_PART>)? (
    	"."<IDENTIFIER_PART>
    	)*("@default")?>
    |
    < IDENTIFIER_PART: (
    	<LETTER_OR_UNDERSCORE>
    	|<DIGIT>
    	|<DATE_IDENTIFIER>)+
    	("["(<DIGIT>)+"]"
    	|"["(<STRING_LITERAL>)"]"
    	|"["(<STRING_LITERAL>)"]["(<DIGIT>)+"]")?>
    |
    < #LETTER_OR_UNDERSCORE: ["_","a"-"z","A"-"Z","\u00e4","\u00c4","\u00f6","\u00d6","\u00cf","\u00dc"] >
    |
    < #DIGIT: ["0"-"9"] >
    |
    < DATE_IDENTIFIER: ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] "-" ["0"-"1"]["0"-"9"] ("-" ["0"-"3"]["0"-"9"])? > 
}


/***************
 * Productions *
 ***************/

SimpleNode start()       :
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    expr() (<EOF>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void expr()      :
{}
{
    equalsExpr()
}

void equalsExpr()      :
{}
{
    compareExpr() ("="/*@bgen(jjtree) #EQNode( 2) */
                       {
                         ASTEQNode jjtn001 = new ASTEQNode(this, JJTEQNODE);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ compareExpr()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
                       }
/*@egen*/ | "!="/*@bgen(jjtree) #NotEQNode( 2) */
                                                       {
                                                         ASTNotEQNode jjtn002 = new ASTNotEQNode(this, JJTNOTEQNODE);
                                                         boolean jjtc002 = true;
                                                         jjtree.openNodeScope(jjtn002);
                                                       }
                                                       try {
/*@egen*/ compareExpr()/*@bgen(jjtree)*/
                                                       } catch (Throwable jjte002) {
                                                         if (jjtc002) {
                                                           jjtree.clearNodeScope(jjtn002);
                                                           jjtc002 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte002 instanceof RuntimeException) {
                                                           throw (RuntimeException)jjte002;
                                                         }
                                                         if (jjte002 instanceof ParseException) {
                                                           throw (ParseException)jjte002;
                                                         }
                                                         throw (Error)jjte002;
                                                       } finally {
                                                         if (jjtc002) {
                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                         }
                                                       }
/*@egen*/)*
}


void compareExpr()      :
{}
{
    addExpr()
    (
        "<"/*@bgen(jjtree) #LTNode( 2) */
               {
                 ASTLTNode jjtn001 = new ASTLTNode(this, JJTLTNODE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/    addExpr()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/
        | ">"/*@bgen(jjtree) #GTNode( 2) */
               {
                 ASTGTNode jjtn002 = new ASTGTNode(this, JJTGTNODE);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/  addExpr()/*@bgen(jjtree)*/
               } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   throw (RuntimeException)jjte002;
                 }
                 if (jjte002 instanceof ParseException) {
                   throw (ParseException)jjte002;
                 }
                 throw (Error)jjte002;
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  2);
                 }
               }
/*@egen*/
        | "<="/*@bgen(jjtree) #LENode( 2) */
               {
                 ASTLENode jjtn003 = new ASTLENode(this, JJTLENODE);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
               }
               try {
/*@egen*/ addExpr()/*@bgen(jjtree)*/
               } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   throw (RuntimeException)jjte003;
                 }
                 if (jjte003 instanceof ParseException) {
                   throw (ParseException)jjte003;
                 }
                 throw (Error)jjte003;
               } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003,  2);
                 }
               }
/*@egen*/
        | ">="/*@bgen(jjtree) #GENode( 2) */
               {
                 ASTGENode jjtn004 = new ASTGENode(this, JJTGENODE);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
               }
               try {
/*@egen*/ addExpr()/*@bgen(jjtree)*/
               } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   throw (RuntimeException)jjte004;
                 }
                 if (jjte004 instanceof ParseException) {
                   throw (ParseException)jjte004;
                 }
                 throw (Error)jjte004;
               } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004,  2);
                 }
               }
/*@egen*/
    )*
}


void addExpr()      :
{}
{
   multExpr() ("+"/*@bgen(jjtree) #AddNode( 2) */
                   {
                     ASTAddNode jjtn001 = new ASTAddNode(this, JJTADDNODE);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ multExpr()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
                   }
/*@egen*/ | "-"/*@bgen(jjtree) #SubNode( 2) */
                                                {
                                                  ASTSubNode jjtn002 = new ASTSubNode(this, JJTSUBNODE);
                                                  boolean jjtc002 = true;
                                                  jjtree.openNodeScope(jjtn002);
                                                }
                                                try {
/*@egen*/ multExpr()/*@bgen(jjtree)*/
                                                } catch (Throwable jjte002) {
                                                  if (jjtc002) {
                                                    jjtree.clearNodeScope(jjtn002);
                                                    jjtc002 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte002 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte002;
                                                  }
                                                  if (jjte002 instanceof ParseException) {
                                                    throw (ParseException)jjte002;
                                                  }
                                                  throw (Error)jjte002;
                                                } finally {
                                                  if (jjtc002) {
                                                    jjtree.closeNodeScope(jjtn002,  2);
                                                  }
                                                }
/*@egen*/)*
}


void multExpr()      :
{}
{
    unaryExpr() ("*"/*@bgen(jjtree) #MultNode( 2) */
                     {
                       ASTMultNode jjtn001 = new ASTMultNode(this, JJTMULTNODE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ unaryExpr()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/ | "/"/*@bgen(jjtree) #DivNode( 2) */
                                                    {
                                                      ASTDivNode jjtn002 = new ASTDivNode(this, JJTDIVNODE);
                                                      boolean jjtc002 = true;
                                                      jjtree.openNodeScope(jjtn002);
                                                    }
                                                    try {
/*@egen*/ unaryExpr()/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte002) {
                                                      if (jjtc002) {
                                                        jjtree.clearNodeScope(jjtn002);
                                                        jjtc002 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte002 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte002;
                                                      }
                                                      if (jjte002 instanceof ParseException) {
                                                        throw (ParseException)jjte002;
                                                      }
                                                      throw (Error)jjte002;
                                                    } finally {
                                                      if (jjtc002) {
                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                      }
                                                    }
/*@egen*/)*
}


void unaryExpr()      :
{}
{
    ( "+"/*@bgen(jjtree) #PlusNode( 1) */
          {
            ASTPlusNode jjtn001 = new ASTPlusNode(this, JJTPLUSNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ unaryExpr()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  1);
            }
          }
/*@egen*/ | "-"/*@bgen(jjtree) #MinusNode( 1) */
                                         {
                                           ASTMinusNode jjtn002 = new ASTMinusNode(this, JJTMINUSNODE);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                         }
                                         try {
/*@egen*/ unaryExpr()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte002) {
                                           if (jjtc002) {
                                             jjtree.clearNodeScope(jjtn002);
                                             jjtc002 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte002 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte002;
                                           }
                                           if (jjte002 instanceof ParseException) {
                                             throw (ParseException)jjte002;
                                           }
                                           throw (Error)jjte002;
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  1);
                                           }
                                         }
/*@egen*/ | "!"/*@bgen(jjtree) #NotNode( 1) */
                                                                         {
                                                                           ASTNotNode jjtn003 = new ASTNotNode(this, JJTNOTNODE);
                                                                           boolean jjtc003 = true;
                                                                           jjtree.openNodeScope(jjtn003);
                                                                         }
                                                                         try {
/*@egen*/ unaryExpr()/*@bgen(jjtree)*/
                                                                         } catch (Throwable jjte003) {
                                                                           if (jjtc003) {
                                                                             jjtree.clearNodeScope(jjtn003);
                                                                             jjtc003 = false;
                                                                           } else {
                                                                             jjtree.popNode();
                                                                           }
                                                                           if (jjte003 instanceof RuntimeException) {
                                                                             throw (RuntimeException)jjte003;
                                                                           }
                                                                           if (jjte003 instanceof ParseException) {
                                                                             throw (ParseException)jjte003;
                                                                           }
                                                                           throw (Error)jjte003;
                                                                         } finally {
                                                                           if (jjtc003) {
                                                                             jjtree.closeNodeScope(jjtn003,  1);
                                                                           }
                                                                         }
/*@egen*/)
    | primitiveExpr()
}


void primitiveExpr()      :
{}
{
    "(" expr()/*@bgen(jjtree) #ParenthesisNode( 1) */
               {
                 ASTParenthesisNode jjtn001 = new ASTParenthesisNode(this, JJTPARENTHESISNODE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ ")"/*@bgen(jjtree)*/
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  1);
                 }
               }
/*@egen*/ | LOOKAHEAD(2) functionCallExpr() | literal() 
}


void functionCallExpr()                  :
{/*@bgen(jjtree) FunctionCallNode */
  ASTFunctionCallNode jjtn000 = new ASTFunctionCallNode(this, JJTFUNCTIONCALLNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionCallNode */
        try {
/*@egen*/
	<IDENTIFIER> "(" [argumentList()] ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void argumentList()             :
{/*@bgen(jjtree) ArgListNode */
  ASTArgListNode jjtn000 = new ASTArgListNode(this, JJTARGLISTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgListNode */
        try {
/*@egen*/
	expr() ( ";" expr() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void literal()      :
{}
{/*@bgen(jjtree) IdentifierNode */
        {
          ASTIdentifierNode jjtn001 = new ASTIdentifierNode(this, JJTIDENTIFIERNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	<IDENTIFIER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/
	|/*@bgen(jjtree) BooleanNode */
    {
      ASTBooleanNode jjtn002 = new ASTBooleanNode(this, JJTBOOLEANNODE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    <BOOLEAN_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/
    |/*@bgen(jjtree) IntegerNode */
    {
      ASTIntegerNode jjtn003 = new ASTIntegerNode(this, JJTINTEGERNODE);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/
    <INTEGER_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/
    |/*@bgen(jjtree) DecimalNode */
    {
      ASTDecimalNode jjtn004 = new ASTDecimalNode(this, JJTDECIMALNODE);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    }
    try {
/*@egen*/
    <DECIMAL_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
    }
/*@egen*/
    |/*@bgen(jjtree) StringNode */
    {
      ASTStringNode jjtn005 = new ASTStringNode(this, JJTSTRINGNODE);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
    }
    try {
/*@egen*/
    <STRING_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
      }
    }
/*@egen*/
    |/*@bgen(jjtree) MoneyNode */
    {
      ASTMoneyNode jjtn006 = new ASTMoneyNode(this, JJTMONEYNODE);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
    }
    try {
/*@egen*/
    <MONEY_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
      }
    }
/*@egen*/
    |/*@bgen(jjtree) NullNode */
    {
      ASTNullNode jjtn007 = new ASTNullNode(this, JJTNULLNODE);
      boolean jjtc007 = true;
      jjtree.openNodeScope(jjtn007);
    }
    try {
/*@egen*/
    <NULL_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc007) {
        jjtree.closeNodeScope(jjtn007, true);
      }
    }
/*@egen*/
}

