import java.text.MessageFormat

def mavenVersion = 'maven 3.8.6'
def jdkVersion = 'AdoptiumJDK17'

pipeline {
    agent any

    environment {
        PROJECT_NAME = 'Faktor-IPS_Update_Versions'
        PROJECT_ID = "${PROJECT_NAME}-${params.NEW_VERSION}"
    }

    options {
        skipDefaultCheckout true
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    currentBuild.displayName = "Update version to ${params.NEW_VERSION} (${params.BRANCH})"

                    assert params.NEW_VERSION ==~ /(\d+\.)+\d+/

                    def scmVars = checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${params.BRANCH}"]],
                        extensions: [[$class: 'WipeWorkspace'], [$class: 'LocalBranch']],
                        userRemoteConfigs: scm.userRemoteConfigs
                    ])

                    LOCAL_BRANCH = scmVars.GIT_LOCAL_BRANCH
                    
                    def xmlfile = readFile 'pom.xml'
                    oldVersion = extractVersionFromPom(xmlfile) { xml -> xml.version }
                    newVersion = params.NEW_VERSION+'-SNAPSHOT'
                }
            }
        }

        stage('Update versions') {
            steps {
                withMaven(maven: "${mavenVersion}", jdk: "${jdkVersion}") {
                    configFileProvider([configFile(fileId: '82515eae-efcb-4811-8495-ceddc084409c', variable: 'TOOLCHAINS'), configFile(fileId: 'a447dcf9-7a34-4521-834a-c2445838a7e4', variable: 'MAVEN_SETTINGS')]) {
                        sh "mvn -V -T1C org.eclipse.tycho:tycho-versions-plugin:set-version -DnewVersion=${newVersion} -DgenerateBackupPoms=false -Dartifacts=base,codequality-config,faktorips-coverage,faktorips-schemas -s $MAVEN_SETTINGS -t $TOOLCHAINS"
                    }
                }
                // see https://github.com/eclipse-tycho/tycho/issues/1677
                sh "find devtools/eclipse/targets/ -type f -name 'eclipse-*.target' -exec sed -i 's/${oldVersion}/${newVersion}/' {} \\;"
                sh "git add . && git commit -m 'Update version to ${newVersion}'"
                sh "git push origin ${LOCAL_BRANCH}"
            }
        }
    }

    post {
        unsuccessful {
            emailext to: 'fips@faktorzehn.de', mimeType: 'text/html', subject: 'Jenkins Release Failure - $JOB_NAME', body: '''
                <img src="https://jenkins.io/images/logos/fire/fire.png" style="max-width: 300px;" alt="Jenkins is not happy about it ...">
                <br>
                $BUILD_URL
            '''
        }
    }
}

def String extractVersionFromPom(String xml, Closure closure) {
    def node = new XmlSlurper().parseText(xml)
    return closure.call(node)?.text()
}
