@Library('f10-jenkins-library@1.1_patches')
@Library('fips-jenkins-library@main')

import java.text.MessageFormat
import org.faktorips.jenkins.MavenProjectVersion

def mavenDocFolder = './maven/faktorips-maven-plugin'
def mavenDocDeployFolder = '/var/www/doc.faktorzehn.org/faktorips-maven-plugin'
def xsdFolder = './devtools/common/faktorips-schemas/src/main/resources'
def xsdDeployFolderTmpl = '/var/www/doc.faktorzehn.org/schema/faktor-ips/{0}.{1}'

pipeline {
    agent any

    tools {
        jdk 'JDK21'
        maven 'maven 3.9'
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '14', numToKeepStr: '100'))
    }

    stages {
        stage('Build and Test') {

            environment {
                MAVEN_OPTS = '-Xmx4g'
                DISPLAY = ':0'
            }

            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER}.${env.GIT_BRANCH}"
                    sh 'rm -rf $HOME/.m2/repository/.meta'
                    sh 'rm -rf $HOME/.m2/repository/.cache'
                    sh 'rm -rf $HOME/.m2/repository/p2'
                }

                withMaven(publisherStrategy: 'EXPLICIT') {
                    sh "mvn -U -V -fae -e clean install -f codequality-config"
                    sh "mvn -U -V -T 8 -fae -e clean install -DskipTests=true -Dmaven.skip.tests=true -pl :targets -am -Dtycho.localArtifacts=ignore"
                    sh "mvn -U -V -T 8 -fae -e clean deploy site checkstyle:checkstyle -Dtycho.localArtifacts=ignore"
                    sh "mvn -V -T 8 -fae -e site:stage -f maven"
                }
            }
        }
        stage('Dependency-Check') {
            steps {
                dir('runtime') {
                    withMaven(publisherStrategy: 'EXPLICIT') {
                        dependencyCheck outputFile: 'dependency-check-runtime-report.html'
                    }
                }
                dir('devtools/common') {
                    withMaven(publisherStrategy: 'EXPLICIT') {
                        dependencyCheck outputFile: 'dependency-check-devtools-report.html'
                    }
                }
                rtp parserName: 'HTML', nullAction: '1', stableText: """
                    <h2>Dependency-Check</h2>
                    <ul><li><a href='${env.BUILD_URL}artifact/dependency-check-runtime-report.html' target='_blank'>Dependency-Check Runtime Report</a></li>
                    <li><a href='${env.BUILD_URL}artifact/dependency-check-devtools-report.html' target='_blank'>Dependency-Check Devtools Common Report</a></li></ul>
                  """
            }
        }

        stage('Deploy Additional Artifacts') {
            steps {
                script {
                    def xmlfile = readFile 'pom.xml'
                    def fipsVersion = MavenProjectVersion.fromPom(xmlfile)
                    def (_, major, minor, patch, kind) = (fipsVersion =~ /(\d+)\.(\d+)\.(\d+)(?:-(SNAPSHOT))?/)[0]
                    sshagent(credentials: ['docDeployRsaKey'], ignoreMissing: true) {
                        // deploy maven plugin doc
                        def xsdDeployFolder = MessageFormat.format(xsdDeployFolderTmpl, major, minor)
                        replaceOnServer server: 'doc@doc.faktorzehn.org', port: '2004', localFolder: mavenDocFolder, remoteFolder: "${mavenDocDeployFolder}/${fipsVersion}"
                        // deploy xsd
                        replaceOnServer server: 'doc@doc.faktorzehn.org', port: '2004', localFolder: xsdFolder, remoteFolder: xsdDeployFolder
                    }
                }
            }
        }

        stage('Build Integrationtest'){
            steps {
                build quietPeriod: 10, job: 'FaktorIPS_Integrationtest'
            }
        }
    }

    post {
        always {
            junit testResults: "**/target/surefire-reports/*.xml", allowEmptyResults: true
            recordIssues enabledForFailure: true,
                    qualityGates: [[threshold: 1, type: 'NEW', unstable: true]],
                    tools: [java(), javaDoc(), spotBugs(), checkStyle(), eclipse()]
            jacoco sourceInclusionPattern: '**/*.java'
        }

        regression {
            sendFailureEmail()
        }
    }
}
