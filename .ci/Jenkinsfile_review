pipeline {
    agent any

    tools {
        jdk 'AdoptiumJDK17'
    }


    environment {
        PROJECT_NAME = 'FaktorIPS'
        BUILD_NAME = "${env.GERRIT_CHANGE_NUMBER}"
        PROJECT_ID = "${PROJECT_NAME}-${BUILD_NAME}"
    }

    stages {
        stage('Build and Test') {

            environment {
                MAVEN_OPTS = '-Xmx4g'
            }

            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER}.${env.GIT_BRANCH}-${env.GERRIT_TOPIC}"
                    sh 'rm -rf $HOME/.m2/repository/.meta'
                    sh 'rm -rf $HOME/.m2/repository/.cache'
                    sh 'rm -rf $HOME/.m2/repository/p2'
                }

                withMaven(maven: 'maven 3.8.6', jdk: 'AdoptiumJDK17', publisherStrategy: 'EXPLICIT') {
                    configFileProvider([configFile(fileId: '82515eae-efcb-4811-8495-ceddc084409c', variable: 'TOOLCHAINS'), configFile(fileId: 'a447dcf9-7a34-4521-834a-c2445838a7e4', variable: 'MAVEN_SETTINGS')]) {
                        sh 'mvn -U -V -fae -e clean install -f codequality-config -s $MAVEN_SETTINGS -t $TOOLCHAINS'
                        sh 'mvn -U -V -fae -e clean install -DskipTests=true -Dmaven.skip.tests=true -pl :targets -am -Dtycho.localArtifacts=ignore -s $MAVEN_SETTINGS -t $TOOLCHAINS'
                        sh 'mvn -U -V -fae -e clean verify site -Dtycho.localArtifacts=ignore -s $MAVEN_SETTINGS -t $TOOLCHAINS'
                    }
                }
            }
        }
        stage('Prepare Artifacts for Archiving') {

            steps {
                sh '''
                #!/bin/bash
                # for DependsOn to work we need to publish artifacts to jenkins in a certain way

                echo "Copy and rename pom files to match the jar artifacts"
                # copy repos zip to jars
                for i in $(find . -maxdepth 4 -name "*.zip" | grep -v 'sources\\|javadoc' | grep 'target/\\(org.\\)*faktorips');
                do
                    to=$(echo $i | sed 's/.zip/.jar/g');
                    cp -v $i $to;
                done
                # copy all poms to jar-file-name.pom
                for i in $(find . -maxdepth 4 -name *.jar | grep -v 'sources\\|javadoc' | grep 'target/\\(org.\\)*faktorips');
                do
                    to=$(echo $i | sed 's/.jar/.pom/g');
                    from=$(dirname $i | sed 's|/target|/pom.xml|g');
                    cp -v $from $to;
                done
                # use flattened poms
                for i in $(find . -maxdepth 4 -name .flattened-pom.xml | sed 's/.flattened-pom.xml//g' | xargs -i% find % -name *.jar | grep -v 'sources\\|javadoc' | grep 'target/\\(org.\\)*faktorips' | grep -v 'bin');
                do
                    to=$(echo $i | sed 's/.jar/.pom/g');
                    from=$(dirname $i | sed 's|/target|/.flattened-pom.xml|g');
                    cp -v $from $to;
                done
                '''
            }
        }
    }

    post {
        always {
            junit testResults: "**/target/surefire-reports/*.xml", allowEmptyResults: true
            recordIssues enabledForFailure: true, qualityGates: [[threshold: 1, type: 'NEW', unstable: true]], tools: [java(), javaDoc(), spotBugs(), checkStyle(), eclipse()]
            jacoco sourceInclusionPattern: '**/*.java'
            archiveArtifacts artifacts: '**/target/*.jar, **/target/*.pom', fingerprint: true
        }

        regression {
            emailext to: 'fips@faktorzehn.de', mimeType: 'text/html', subject: 'Jenkins Build Failure - $PROJECT_NAME', body: '''
                <img src="https://jenkins.io/images/logos/fire/fire.png" style="max-width: 300px;" alt="Jenkins is not happy about it ...">
                <br>
                $BUILD_URL
            '''
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '14', numToKeepStr: '10'))
    }
}
